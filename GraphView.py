# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graphView.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import flood_tool
from PyQt5.QtWebEngineWidgets import QWebEngineView
import io
import folium

class Ui_MainWindow(object):
    """Class for generating and controlling the data visualizer."""
    def __init__(self):
        """
        Parameters
        ----------

        None
        """
        self.df = pd.DataFrame()
        self._translate = QtCore.QCoreApplication.translate

    def setupUi(self, MainWindow):
        """
        Set up the Ui for visualizer.

        Parameters
        ----------

        MainWindow: QtWidgets.QMainWindow, the main window
        """
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1155, 666)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        MainWindow.setMouseTracking(False)
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(10, 10, 10, 10)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_fn = QtWidgets.QLabel(self.centralwidget)
        self.label_fn.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_fn.setObjectName("label_fn")
        self.verticalLayout_2.addWidget(self.label_fn)
        self.lineEdit_fn = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_fn.setMaximumSize(QtCore.QSize(150, 16777215))
        self.lineEdit_fn.setObjectName("lineEdit_fn")
        self.verticalLayout_2.addWidget(self.lineEdit_fn)
        self.pushButton_lf = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_lf.setObjectName("pushButton_lf")
        self.pushButton_lf.setMaximumSize(QtCore.QSize(150, 16777215))
        self.verticalLayout_2.addWidget(self.pushButton_lf)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_2.addWidget(self.line)
        self.label_dot = QtWidgets.QLabel(self.centralwidget)
        self.label_dot.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_dot.setObjectName("label_dot")
        self.verticalLayout_2.addWidget(self.label_dot)
        self.comboBox_dot = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_dot.setObjectName("comboBox_dot")
        self.comboBox_dot.setMaximumSize(QtCore.QSize(150, 16777215))
        self.comboBox_dot.addItems(['None', 'Flood Probability', 'Median Price', 'Flood Risk'])
        self.verticalLayout_2.addWidget(self.comboBox_dot)

        self.label_label = QtWidgets.QLabel(self.centralwidget)
        self.label_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_label.setObjectName("label_fn")
        self.verticalLayout_2.addWidget(self.label_label)

        self.comboBox_label = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_label.setObjectName("self.comboBox_label")
        self.comboBox_label.setMaximumSize(QtCore.QSize(150, 16777215))
        self.comboBox_label.addItems(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])
        self.verticalLayout_2.addWidget(self.comboBox_label)

        self.checkBox_rainfall = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_rainfall.setObjectName("checkBox_rainfall")
        self.verticalLayout_2.addWidget(self.checkBox_rainfall)
        self.checkBox_tide = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_tide.setObjectName("checkBox_tide")
        self.verticalLayout_2.addWidget(self.checkBox_tide)
        self.checkBox_stage = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_stage.setObjectName("checkBox_stage")
        self.verticalLayout_2.addWidget(self.checkBox_stage)
        self.pushButton_plot = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_plot.setMaximumSize(QtCore.QSize(150, 16777215))
        self.pushButton_plot.setObjectName("pushButton_plot")
        self.verticalLayout_2.addWidget(self.pushButton_plot)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout.addLayout(self.horizontalLayout)
        # initialize the map in ui
        map = folium.Map()
        data = io.BytesIO()
        map.save(data, close_file=False)
        self.web_view = QWebEngineView()
        self.web_view.setHtml(data.getvalue().decode())
        self.verticalLayout_3.addWidget(self.web_view)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_lf.clicked.connect(self.click_pushButton_lf)
        self.pushButton_plot.clicked.connect(self.click_pushButton_plot)

    def retranslateUi(self, MainWindow):
        """
        Set up the text on some labels.

        Parameters
        ----------

        MainWindow: QtWidgets.QMainWindow, the main window
        """
        MainWindow.setWindowTitle(self._translate("MainWindow", "Data Visualizer"))
        self.label_fn.setText(self._translate("MainWindow", "File name:"))
        self.pushButton_lf.setText(self._translate("MainWindow", "Load File"))
        self.label_dot.setText(self._translate("MainWindow", "Dot option:"))
        self.checkBox_rainfall.setText(self._translate("MainWindow", "Live Rainfall Data"))
        self.checkBox_tide.setText(self._translate("MainWindow", "Live Tide Data"))
        self.checkBox_stage.setText(self._translate("MainWindow", "Live Stage Data"))
        self.pushButton_plot.setText(self._translate("MainWindow", "Plot"))
        self.label_label.setText(self._translate("MainWindow", "Level at:"))
    
    def click_pushButton_lf(self):
        """
        Click event for the push Button of loading a .csv file.
        """
        filename = self.lineEdit_fn.text()
        try:
            self.df = pd.read_csv('result_file/' + filename + '.csv')
        except:
            self.df = pd.DataFrame()
    
    def click_pushButton_plot(self):
        """
        Click event for the push Button of plotting the graph based on different options.
        """
        isRainfall = self.checkBox_rainfall.isChecked()
        isTide = self.checkBox_tide.isChecked()
        isStage = self.checkBox_stage.isChecked()
        dotOpt = self.comboBox_dot.currentText()
        labelOpt = self.comboBox_label.currentText()

        df_fp = pd.DataFrame()
        df_mp = pd.DataFrame()
        df_fr = pd.DataFrame()
        try:
            df_fp = self.df.iloc[:, [0,1,2]].copy()
        except:
            pass
        try:
            df_mp = self.df.iloc[:, [0,1,3]].copy()
        except:
            pass
        try:
            df_fr = self.df.iloc[:, [0,1,4]].copy()
        except:
            pass

        map = folium.Map()

        try:
            if dotOpt == 'Flood Probability':
                df_fp['c'] = df_fp.iloc[:, 2].values.tolist()
                map = flood_tool.create_map(label_data=df_fp.head(1000), live_rain=isRainfall, live_tide=isTide,
                    live_stage=isStage, plot_type='label', level=int(labelOpt))
            elif dotOpt == 'Median Price':
                r_list = df_mp.iloc[:, 2].quantile(q=[i/10 for i in range(11)]).values.tolist()
                map = flood_tool.create_map(price_data=df_mp.head(1000), live_rain=isRainfall, live_tide=isTide,
                    live_stage=isStage, plot_type='price', level=int(labelOpt))
            elif dotOpt == 'Flood Risk':
                r_list = df_fr.iloc[:, 2].quantile(q=[i/10 for i in range(11)]).values.tolist()
                map = flood_tool.create_map(risk_data=df_fr.head(1000), live_rain=isRainfall, live_tide=isTide,
                    live_stage=isStage, plot_type='risk', level=int(labelOpt))
            elif dotOpt == 'None':
                map = flood_tool.create_map(live_rain=isRainfall, live_tide=isTide,
                    live_stage=isStage)
        except:
            return

        # generate the new map
        data = io.BytesIO()
        map.save(data, close_file=False)
        web_view = QWebEngineView()
        web_view.setHtml(data.getvalue().decode())
        
        # remove the old map and plot a new map
        self.verticalLayout_3.replaceWidget(self.web_view, web_view)
        self.web_view.setParent(None)
        self.verticalLayout_3.addWidget(web_view)
        self.web_view = web_view

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
